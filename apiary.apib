FORMAT: 1A
HOST: https://https://132.145.135.161:8081/

# db-lane
New collections as the api evolves
## Response Conventions
Content-Type: application/json; charset=utf-8
## Action conventions
* GET - retrieves resources
* POST - submits new data to the user
* PUT -  updates existing data
* DELETE - removes data

## Response HTTP status codes

* 200 Ok - request was successful
* 201 Created - a new record was created
* 400 Bad Request – This means that client-side input fails validation.
* 401 Unauthorized – This means the user isn’t not authorized to access a resource. It usually returns when the user isn’t authenticated.
* 403 Forbidden – This means the user is authenticated, but it’s not allowed to access a resource.
* 404 Not Found – This indicates that a resource is not found.
* 500 Internal server error – This is a generic server error. It probably shouldn’t be thrown explicitly.
* 502 Bad Gateway – This indicates an invalid response from an upstream server.
* 503 Service Unavailable – This indicates that something unexpected happened on server side (It can be anything like server overload, some parts of the system failed, etc.).

# Group User Transactions
## Users Collection [/users]

### List All Users [GET]
Filter may include "name", "email", "isAdministrator"

+ Response 200 (application/json)

        [
            {
                "name": "User's Name",
                "email": "User's email address",
                "isAdministrator": "is the new user an administrator?"
                "choices": 
                    [
                        "yes",
                        "no"
                    ]
            }
        ]

+ Response 403 (application/json)
    
    + Body
    
            {
                "message": "You do not administrative privileges on this api"
            }
### Create a New User [POST]
A user with administrative privledges may add new users

    + Body

            {
                "name": "User's Name"
                "email": "User's email address"
                "isAdministrator": "is the new user an administrator?"
                "choices": 
                    [
                        "yes",
                        "no"
                    ]
            }

+ Response 201 (application/json)

    + Headers

            Location: /users/${id}

    + Body

            {
                "message": `User ${name} with email ${email} added. Administrative privileges: ${isAdministrator}`
            }
            
+ Response 400 (application/json)

    + Headers

            Location: /users

    + Body
    
            {
                "message": `User ${name} already exists.`
            }
            
+ Response 403 (application/json)

    + Headers

            Location: /users

    + Body
    
            {
                "message": "You do not administrative privileges on this api"
            }
            
### Modify a user [PUT]

    + Body
    
            {
                "name": "User's name"
                "email": "User's email address"
                "isAdministrator": "is the new user an administrator?"
                "choices": 
                    [
                        "yes",
                        "no"
                    ]
            }

+ Response 200 (application/json)

    + Headers

            Location: /users/${id}

    + Body

            {
                "message": `User ${name} with email ${email} had been modified. Administrative privledges: ${isAdministrator}`
            }
+ Response 400 (application/json)
    + Body
    
            {
                "message": `User ${name} not found.`
            }
+ Response 403 (application/json)
    + Body
    
            {
                "message": "You do not administrative privileges on this api"
            }
### Delete a user [DELETE]
    + Body
            {
                "name": "User's name"
            }

+ Response 201 (application/json)

    + Headers

            Location: /users/${id}

    + Body

            {
                "message": `User ${name} deleted.`
            }
+ Response 400 (application/json)
    + Body
    
            {
                "message": `User ${name} not found.`
            }
+ Response 403 (application/json)
    + Body
    
            {
                "message": "You do not administrative privileges on this api"
            }

## Nickname Collection [/nicknames]
### List all nicknames for a user  [GET]
+ Response 200 (application/json)

        [
            {
                "name": "User's Name"
                "nickName": "the nickname for a user",
            }
        ]

### Create a nickname [POST]

    + Body

            {
                "name": "User's Name to be assigned a nickname"
                "nickname": "the nickname for a user""
            }

+ Response 201 (application/json)

    + Headers

            Location: /nicknames/${id}

    + Body

            {
                "message": `User ${name} has been given nickname ${nickname}`
            }
            
+ Response 400 (application/json)

    + Headers

            Location: /nicknames

    + Body
    
            {
                "message": `Nickname ${nickname} for User ${name} already exists.`
            }
            

### Delete a nickname [DELETE]
    + Body

            {
                "name": "User's Name"
                "nickname": "the nickname for a user""
            }

+ Response 201 (application/json)

    + Headers

            Location: /nicknames/${id}

    + Body

            {
                "message": `Nickname "${nickname}" for User "${name}" deleted.`
            }
+ Response 400 (application/json)
    + Body
    
            {
                "message":  `Nickname "${nickname}" for User ${name} not found.`
            }
## ActivityList Collection [/activitylists]

### Create an activity list [POST]
An activy list is created for the current user

    + Body
            {
                "name": "User's Name"
            }
+ Response 201 (application/json)

    + Headers

            Location: /activitylists/${id}

    + Body

            {
                "message": `An Activity List for User ${name} has been created.`
            }
            
+ Response 400 (application/json)

    + Headers

            Location: /activitylists

    + Body
    
            {
                "message": `An Activity List for User ${name} already exists.`
            }
            

### Delete an activity list [DELETE]
    + Body

            {
                "name": "User's Name"
            }

+ Response 201 (application/json)

    + Headers

            Location: /activitylists/${id}

    + Body

            {
                "message": `The Activity List and all activities for User ${name} have been deleted.`
            }
+ Response 400 (application/json)
    + Body
    
            {
                "message": `The Activity List for User ${name} does not exist.`
            }