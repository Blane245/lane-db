Create the lane_db vm
Image - CanonicalUbuntu 22.04
Shape - Ampere VM.Standard.A1.Flex, 4 CPUs, 24GB RAM
SSH keys - generate and save key pair
boot volume - specify customer boot volumne size (150 GB) balanced, use in-transit encryption
to install remote desktop on Oracle Cloud follow sudo https://fullstackcode.dev/2022/12/10/create-free-ubuntu-remote-desktop-on-oracle-cloud-part-i/#:~:text=Create%20Free%20Ubuntu%20Remote%20Desktop%20on%20Oracle%20Cloud,Remote%20Desktop%20...%205%20Create%20Swap%20File%20
install the development environment 
node.js
	sudo apt update
	sudo apt upgrade
	sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
	sudo apt install nodejs
	node -v
	
visual code (not needed)
	follow instruction in method 3 https://www.golinuxcloud.com/install-visual-studio-code-ubuntu-22/
install github pull requests
install mysql
	follow using apt https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-22-04

install mysql server on ubuntu vm
see https://ubuntu.com/server/docs/databases-mysql
	sudo apt install mysql-server	
	sudo service mysql status
	sudo mysql
	ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'Password123!@#';
	sudo ss -tap | grep mysql
	sudo journalctl -u mysql

create lane_db from cli
	mysql -u root -p
	CREATE DATABASE lane_db
	CREATE DATABASE lane_db_test

open the ports in the firewall for RDP, mysql, sara-ai, cors

sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3389 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3306 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 8080 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 8081 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 8082 -j ACCEPT
sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 80 -j ACCEPT
sudo netfilter-persistent save

net diagnostics 
	sudo apt install net-tools
	things listening
		sudo lsof -nP -iTCP -sTCP:LISTEN

creating apiary


creating a domain name 
https://www.noip.com/login?ref_url=console 

configuring for https:
Serve your RESTful API with https!

1) Install nginx.
Replace any instances they use in these tutorials "example.com" or "your_domain" with "lanedb.hopto.org"
How To Install Nginx on Ubuntu 20.04 | DigitalOcean

2) Configure a root location block in your nginx sites-available directory to proxy the port you are using for your production server to the normal http port(80). You can change this root location block to a non-root (/api for example) if you want to serve more content in the future, but for now we want all web traffic to lanedb.hopto.org being directed to your server listening (on port 8081 I think?). The tutorial from step 1 should have you making this file already, but this is all yours needs to contain:

sudo nano /etc/nginx/sites-available/lanedb.hopto.org

server {
  location / {
    proxy_pass http://lanedb.hopto.org:8081/; 
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
  }
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    server_name lanedb.hopto.org;
    listen  80 ;
}

And if you completed the tutorial from step 1 you should already have a symlink pointing from the above file to /etc/nginx/sites-enabled/lanedb.hopto.org

3) Get your free SSL cert from Let's Encrypt by using the certbot command line tool. 
How To Secure Nginx with Let's Encrypt on Ubuntu 20.04 | DigitalOcean

At this point you should be able to send the same requests you've been using in postman to https://lanedb.hopto.org. If not, give me a shout and I'll take a look! You can read up more on nginx as far as allowing and denying certain hosts if you want to lock things down more. But for now, since you aren't running anything secured just yet, you won't get anything too malicious.

p.s. I believe certbot will even set up a cron job to renew your cert for you automatically as long as you keep this VM active. So if you end up transferring just remember they do expire! They're easy to renew as long as you catch it in time. If you give them your email when you register they will send you a reminder email automatically if it doesn't auto-renew

p.p.s the first place to look if something isn't working is at those logs you defined in the server block. 
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log
^watch this one for all of the 404 errors from bots trying to probe your server for vulnerabilities! 
